Compréhension des données de tracking : Familiarisez-vous avec le format et le contenu des données de tracking que l'équipe vous a fournies. Ces données incluent généralement les positions des joueurs et du ballon à intervalles réguliers pendant le match.
Définition des événements : Identifiez et définissez clairement ce que vous considérez comme un événement (par exemple, tirs, coups de pied arrêtés, pénalties, hors-jeux). Cela inclut les critères spécifiques qui caractérisent chaque type d'événement.
Analyse et extraction d'événements : Développez des algorithmes pour détecter ces événements à partir des données de tracking. Par exemple :
Tirs : Un tir peut être identifié quand il y a un changement rapide de la vitesse du ballon vers le but adverse.
Coups de pied arrêtés : Ces événements peuvent être identifiés lorsque le jeu s'arrête (aucun mouvement significatif des joueurs ou du ballon) suivi d'une action localisée (tir, passe longue).
Pénalties : Généralement suivis par un arrêt de jeu, le positionnement des joueurs dans la surface de réparation, et un tir direct au but.
Hors-jeu : Détecter des situations où un joueur reçoit le ballon en étant positionné au-delà de l'avant-dernier défenseur adverse, au moment où le ballon est joué vers lui.
Validation des données : Il est crucial de valider les événements détectés avec des enregistrements vidéo des matchs pour s'assurer que les algorithmes fonctionnent correctement.
Visualisation : Développez des outils pour visualiser les événements détectés pour faciliter l'analyse par les entraîneurs et les analystes de l'équipe.
Amélioration continue : Ajustez et améliorez vos algorithmes en fonction des retours et des analyses supplémentaires pour augmenter la précision et la fiabilité de la détection d'événements.



def promo(dict):
    total = 0
    for key, value in dict.items():
        total += value
        total_franc = total * 655.95
    reduction = (total * 0.25) 
    reduction_franc = reduction * 655.95 
    budget = total - reduction  
    budget_franc = budget * 655.95  

    print(f"Votre achat fait au total: {total} euros")
    print(f"Voici une estimation en Fcfa du total: {total_franc:.2f}") 
    print(f"Vous aurez une réduction de 25% appliquée qui est = {reduction} euros.")
    print(f"Voici une estimation en Fcfa de la reduction: {reduction_franc:.2f}") 
    print(f"Vous devez prévoir un budget de {budget} euros.")
    print(f"Voici une estimation en Fcfa: {budget_franc:.2f}") 



    import pandas as pd

def nettoyer_et_formatter_dataframe(nom_du_fichier):
    # Charger le fichier CSV
    df = pd.read_csv(nom_du_fichier)
    
    # Définir les nouveaux noms de colonnes selon la documentation
    nouveaux_noms_de_colonnes = [
        'Numéro de maillot', 'Type d\'objet', 'Prénom', 'Nom de famille', 'ID de position',
        'Date de naissance du joueur', 'Temps entré', 'Temps sorti', 'ID de joueur événement',
        'ID de joueur suivi', 'ID de match événement', 'ID de match suivi'
    ]
    
    # Renommer les colonnes
    df.columns = nouveaux_noms_de_colonnes
    
    # Convertir la colonne "ID de match suivi" en chaîne de caractères et supprimer le point-virgule
    df['ID de match suivi'] = df['ID de match suivi'].astype(str).str.replace(';', '')
    
    # Ajouter une colonne avec le nom complet
    df['Nom complet'] = df['Prénom'] + ' ' + df['Nom de famille']
    
    # Supprimer les colonnes non nécessaires
    df = df.drop(columns=['Numéro de maillot', "Type d'objet", 'ID de position',
                          'Date de naissance du joueur', 'ID de joueur événement',
                          'ID de joueur suivi', 'ID de match événement', 'ID de match suivi'])
    
    return df
def fusionner_dataframes(nom_du_fichier_joueurs, nom_du_fichier_tracking):
    # Nettoyer et formater le DataFrame des joueurs
    df_joueurs = nettoyer_et_formatter_dataframe(nom_du_fichier_joueurs)
    
    # Charger le fichier tracking
    df_tracking = pd.read_csv(nom_du_fichier_tracking)
    
    # Fusionner les DataFrames sur le nom des joueurs
    df_fusionne = pd.merge(df_tracking, df_joueurs, left_on='player.name', right_on='Nom complet', how='inner')
    
    return df_fusionne


fichier_joueurs = "../../Data/HAC/SOCCER_PLAYERS_OPT�2568921.csv"
fichier_tracking = "../../Data/montpellier.csv"
df_joueurs = nettoyer_et_formatter_dataframe(fichier_joueurs)



df_match = fusionner_dataframes(fichier_joueurs, fichier_tracking)



df_match[:100]


import pandas as pd

# Création d'un DataFrame pour les positions des joueurs
data = {
    'role': ["Gardien","Defenseur gauche", "Defenseur droit", "Lateral gauche",  "Lateral droit", "Milieu def", "Milieu off", "Milieu off", "Ailier gauche", "Ailier droit", "Attaquant"],
    'player.name': ['Arthur Desmas', 'Gautier Lloris', 'Loic Nego', 'Arouna Sangante', 'Yoann Salmier', 'Oussama Targhalline', 'Rassoul Ndiaye', 'Daler Kuzyaev',  'Nabil Alioui', 'Josue Casimir', 'Issa Soumarelaye',],
    'team.name': ['Le Havre', 'Le Havre', 'Le Havre','Le Havre','Le Havre','Le Havre','Le Havre','Le Havre','Le Havre','Le Havre','Le Havre'],
    'period': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    'location.x': [3, 12, 12, 25, 25, 50, 80, 80, 100, 100, 110],
    'location.y': [40, 30, 50, 10, 70, 40, 20, 60, 10, 70, 40]
}

df_positions = pd.DataFrame(data)

# Affichage du DataFrame
df_positions



import pandas as pd
import plotly.graph_objs as go

    def visualize_pass_network(player_positions_df , passes_df):
        

    # Convertir les dataframes en dictionnaires
        players_positions = {
            row['player.name']: (row['location.x'], row['location.y'])
            for index, row in player_positions_df.iterrows()
        }

        # Calculer les informations des passes
        pass_info = passes_df.groupby(['player.name']).agg(
            num_passes=('pass.length', 'size'),
            avg_pass_length=('pass.length', 'mean')
        ).reset_index()

        pass_info_received = passes_df.groupby(['pass.recipient.name']).agg(
            num_passes_received=('pass.length', 'size'),
            avg_pass_length_received=('pass.length', 'mean')
        ).reset_index()

        # Créer des dictionnaires pour les infos de passes
        pass_info_dict = {
            row['player.name']: {
                'num_passes': row['num_passes'],
                'avg_pass_length': row['avg_pass_length']
            }
            for index, row in pass_info.iterrows()
        }

        pass_info_received_dict = {
            row['pass.recipient.name']: {
                'num_passes_received': row['num_passes_received'],
                'avg_pass_length_received': row['avg_pass_length_received']
            }
            for index, row in pass_info_received.iterrows()
        }

        # Tracer le terrain de football
        fig = go.Figure()

        # Ajout des formes pour représenter le terrain de football
        terrain_shapes = [
            dict(type="rect", x0=0, y0=0, x1=120, y1=80, line=dict(color="Black")),
            dict(type="line", x0=60, y0=0, x1=60, y1=80, line=dict(color="Black", dash="dot")),
            dict(type="rect", x0=0, y0=18, x1=18, y1=62, line=dict(color="Black")),
            dict(type="rect", x0=102, y0=18, x1=120, y1=62, line=dict(color="Black")),
            dict(type="rect", x0=0, y0=30, x1=5.5, y1=50, line=dict(color="Black")),
            dict(type="rect", x0=114.5, y0=30, x1=120, y1=50, line=dict(color="Black")),
            dict(type="rect", x0=0, y0=36, x1=2, y1=44, line=dict(color="Black")),
            dict(type="rect", x0=118, y0=36, x1=120, y1=44, line=dict(color="Black")),
            dict(type="circle", xref="x", yref="y", x0=50.4, y0=30.4, x1=69.6, y1=49.6, line_color="Black"),
        ]
        fig.update_layout(shapes=terrain_shapes)

        # Ajout des joueurs sur le terrain avec les infos de passes
        for player, pos in players_positions.items():
            passes_from_player = pass_info_dict.get(player, {'num_passes': 0, 'avg_pass_length': 0})
            passes_to_player = pass_info_received_dict.get(player, {'num_passes_received': 0, 'avg_pass_length_received': 0})

            hover_text = (
                f"Joueur: {player}<br>"
                f"Nombre de passes effectuées: {passes_from_player['num_passes']}<br>"
                f"Longueur moyenne des passes effectuées: {passes_from_player['avg_pass_length']:.2f} m<br>"
                f"Nombre de passes reçues: {passes_to_player['num_passes_received']}<br>"
                f"Longueur moyenne des passes reçues: {passes_to_player['avg_pass_length_received']:.2f} m"
            )

            fig.add_trace(go.Scatter(
                x=[pos[0]],
                y=[pos[1]],
                mode='markers+text',
                text=[player],
                textposition="top center",
                marker=dict(size=10, color='blue'),
                hovertext=hover_text,
                hoverinfo="text"
            ))

        # Ajout des passes
        for passe in passes_df.itertuples():
            if passe._4 in players_positions and passe._5 in players_positions:
                start = players_positions[passe._4]
                end = players_positions[passe._5]
                fig.add_trace(go.Scatter(
                    x=[start[0], end[0]],
                    y=[start[1], end[1]],
                    mode='lines',
                    line=dict(width=2, color='red')
                ))

        fig.update_layout(
            title="Réseau de passes sur un terrain de football",
            xaxis=dict(range=[0, 120], showgrid=False, zeroline=False),
            yaxis=dict(range=[0, 80], showgrid=False, zeroline=False),
            width=800,
            height=600
        )
        fig.show()


    # Exemple d'utilisation avec les fichiers CSV
    player_positions_df = df_positions
    passes_df= df_passes

    # Appel de la fonction pour afficher le réseau de passes
    visualize_pass_network(player_positions_df, passes_df)


import plotly.graph_objs as go

# Dictionnaire des positions en fonction des rôles
role_positions = {
    "Gardien": [(3, 40)],
    "Défenseur": [(12, 30), (12, 50), (25, 10), (25, 70)],
    "Milieu de terrain": [(50, 40), (80, 20), (80, 60)],
    "Attaquant": [(100, 10), (100, 70), (110, 40)]
}

# Fonction pour obtenir la position en fonction du rôle et de l'index
def get_position(role, index, role_positions, role_count):
    if role in role_positions and index < len(role_positions[role]):
        return role_positions[role][index]
    else:
        # Gérer les excédents en attribuant des positions restantes
        if role == "Défenseur":
            role = "Milieu de terrain"
        elif role == "Milieu de terrain":
            role = "Attaquant"
        elif role == "Attaquant":
            role = "Défenseur"
        return get_position(role, role_count[role], role_positions, role_count)

def visualize_pass_network(player_positions_df, passes_df):
    for period in [1, 2]:
        # Filtrer les données pour la période actuelle
        passes_df_period = passes_df[passes_df['period'] == period]

        # Convertir les données de la dataframe en dictionnaires
        role_count = {"Défenseur": 0, "Milieu de terrain": 0, "Attaquant": 0, "Gardien": 0}
        players_positions = {}

        for index, row in player_positions_df.iterrows():
            role = row['role']
            position = get_position(role, role_count[role], role_positions, role_count)
            role_count[role] += 1
            players_positions[row['player.name']] = position

        # Calculer les informations des passes
        pass_info = passes_df_period.groupby(['player.name']).agg(
            num_passes=('pass.length', 'size'),
            avg_pass_length=('pass.length', 'mean')
        ).reset_index()

        pass_info_received = passes_df_period.groupby(['pass.recipient.name']).agg(
            num_passes_received=('pass.length', 'size'),
            avg_pass_length_received=('pass.length', 'mean')
        ).reset_index()

        # Créer des dictionnaires pour les infos de passes
        pass_info_dict = {
            row['player.name']: {
                'num_passes': row['num_passes'],
                'avg_pass_length': row['avg_pass_length']
            }
            for index, row in pass_info.iterrows()
        }

        pass_info_received_dict = {
            row['pass.recipient.name']: {
                'num_passes_received': row['num_passes_received'],
                'avg_pass_length_received': row['avg_pass_length_received']
            }
            for index, row in pass_info_received.iterrows()
        }

        # Tracer le terrain de football
        fig = go.Figure()

        # Ajouter des formes pour représenter le terrain de football
        terrain_shapes = [
            dict(type="rect", x0=0, y0=0, x1=120, y1=80, line=dict(color="Black")),
            dict(type="line", x0=60, y0=0, x1=60, y1=80, line=dict(color="Black", dash="dot")),
            dict(type="rect", x0=0, y0=18, x1=18, y1=62, line=dict(color="Black")),
            dict(type="rect", x0=102, y0=18, x1=120, y1=62, line=dict(color="Black")),
            dict(type="rect", x0=0, y0=30, x1=5.5, y1=50, line=dict(color="Black")),
            dict(type="rect", x0=114.5, y0=30, x1=120, y1=50, line=dict(color="Black")),
            dict(type="rect", x0=0, y0=36, x1=2, y1=44, line=dict(color="Black")),
            dict(type="rect", x0=118, y0=36, x1=120, y1=44, line=dict(color="Black")),
            dict(type="circle", xref="x", yref="y", x0=50.4, y0=30.4, x1=69.6, y1=49.6, line_color="Black"),
        ]
        fig.update_layout(shapes=terrain_shapes)

        # Ajouter les joueurs sur le terrain avec les infos de passes
        for player, pos in players_positions.items():
            passes_from_player = pass_info_dict.get(player, {'num_passes': 0, 'avg_pass_length': 0})
            passes_to_player = pass_info_received_dict.get(player, {'num_passes_received': 0, 'avg_pass_length_received': 0})

            hover_text = (
                f"Joueur: {player}<br>"
                f"Nombre de passes effectuées: {passes_from_player['num_passes']}<br>"
                f"Longueur moyenne des passes effectuées: {passes_from_player['avg_pass_length']:.2f} m<br>"
                f"Nombre de passes reçues: {passes_to_player['num_passes_received']}<br>"
                f"Longueur moyenne des passes reçues: {passes_to_player['avg_pass_length_received']:.2f} m"
            )

            fig.add_trace(go.Scatter(
                x=[pos[0]],
                y=[pos[1]],
                mode='markers+text',
                text=[player],
                textposition="top center",
                marker=dict(size=10, color='blue'),
                hovertext=hover_text,
                hoverinfo="text"
            ))

        # Calculer le nombre et la longueur moyenne des passes entre les joueurs
        passes_between_players = passes_df_period.groupby(['player.name', 'pass.recipient.name']).agg(
            num_passes=('pass.length', 'size'),
            avg_pass_length=('pass.length', 'mean')
        ).reset_index()

        # Ajouter les passes
        for row in passes_between_players.itertuples():
            if row[1] in players_positions and row[2] in players_positions:
                start = players_positions[row[1]]
                end = players_positions[row[2]]
                hover_text = (
                    f"Passes de {row[1]} à {row[2]}<br>"
                    f"Nombre de passes: {row.num_passes}<br>"
                    f"Longueur moyenne des passes: {row.avg_pass_length:.2f} m"
                )
                fig.add_trace(go.Scatter(
                    x=[start[0], end[0]],
                    y=[start[1], end[1]],
                    mode='lines',
                    line=dict(width=2, color='red'),
                    hovertext=hover_text,
                    hoverinfo="text"
                ))

        fig.update_layout(
            title=f"Réseau de passes sur un terrain de football - Période {period}",
            xaxis=dict(range=[0, 120], showgrid=False, zeroline=False),
            yaxis=dict(range=[0, 80], showgrid=False, zeroline=False),
            width=800,
            height=600
        )
        fig.show()

# Appel de la fonction pour créer les figures du réseau de passes pour chaque période
visualize_pass_network(df_positions, df_passes)
